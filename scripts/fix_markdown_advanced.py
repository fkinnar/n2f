#!/usr/bin/env python3
"""
Script avanc√© de correction des fichiers Markdown.

Ce script corrige automatiquement les probl√®mes de num√©rotation
des listes ordonn√©es qui ne peuvent pas √™tre r√©solus par markdownlint.
"""

import re
import subprocess
from pathlib import Path


def _fix_ordered_lists(file_path):
    """Corrige les listes ordonn√©es dans un fichier Markdown."""
    try:
        with open(file_path, "r", encoding="utf-8") as f:
            lines = f.readlines()

        fixed_lines = []
        current_list_number = 1
        in_list = False

        for line in lines:
            # D√©tecter si c'est une ligne de liste ordonn√©e
            match = re.match(r"^(\s*)\d+\.\s+(.*)", line)
            if match:
                indent = match.group(1)
                content = match.group(2)

                # Si c'est le d√©but d'une nouvelle liste (commence par "1.")
                if match.group(0).strip().startswith("1."):
                    current_list_number = 1
                    in_list = True

                # Cr√©er la ligne corrig√©e
                corrected_line = f"{indent}{current_list_number}. {content}\n"
                fixed_lines.append(corrected_line)
                current_list_number += 1
            else:
                # Si ce n'est pas une ligne de liste, r√©initialiser le compteur
                if in_list:
                    in_list = False
                    current_list_number = 1
                fixed_lines.append(line)

        # √âcrire le fichier corrig√©
        with open(file_path, "w", encoding="utf-8") as f:
            f.writelines(fixed_lines)

        print(f"‚úÖ {file_path.name} corrig√© avec succ√®s")
        return True

    except Exception as e:
        print(f"‚ùå Erreur lors de la correction de {file_path.name}: {e}")
        return False


def _find_markdown_files():
    """Trouve tous les fichiers Markdown du projet."""
    project_root = Path(__file__).parent.parent
    markdown_files = [
        f
        for f in project_root.rglob("*.md")
        if not any(
            part.startswith(".") or part in ["env", "venv", "__pycache__"]
            for part in f.parts
        )
    ]
    return markdown_files


def _format_files_with_mdformat(markdown_files):
    """Formate les fichiers avec mdformat."""
    print("\n" + "=" * 60)
    print("√âTAPE 2: Formatage avec mdformat")
    print("=" * 60)

    for file in markdown_files:
        print(f"üìù Formatage de {file.name}...")
        try:
            result = subprocess.run(
                f'mdformat "{file}" --wrap=88',
                shell=True,
                capture_output=True,
                text=True,
                check=False,
            )
            if result.returncode == 0:
                print(f"‚úÖ {file.name} format√© avec succ√®s")
            else:
                print(f"‚ö†Ô∏è  {file.name} - Probl√®mes de formatage")
        except Exception as e:
            print(f"‚ùå Erreur lors du formatage de {file.name}: {e}")


def _final_verification(markdown_files):
    """V√©rification finale avec markdownlint."""
    print("\n" + "=" * 60)
    print("√âTAPE 3: V√©rification finale avec markdownlint")
    print("=" * 60)

    print("\nüîç V√©rification finale de tous les fichiers...")
    all_files = " ".join(f'"{f}"' for f in markdown_files)

    try:
        result = subprocess.run(
            f"markdownlint {all_files}",
            shell=True,
            capture_output=True,
            text=True,
            check=False,
        )

        if result.returncode == 0:
            print("\nüéâ Tous les fichiers Markdown sont maintenant conformes !")
        else:
            print("\n‚ö†Ô∏è  Certains fichiers Markdown ont encore des probl√®mes.")
            print("   Sortie markdownlint:")
            if result.stderr:
                print(result.stderr)

            # Afficher un r√©sum√© des probl√®mes restants
            print("\nüìä R√©sum√© des probl√®mes restants:")
            for file in markdown_files:
                try:
                    check_result = subprocess.run(
                        f'markdownlint "{file}"',
                        shell=True,
                        capture_output=True,
                        text=True,
                        check=False,
                    )
                    if check_result.returncode == 0:
                        print(f"‚úÖ {file.name} - Aucun probl√®me")
                    else:
                        print(f"‚ùå {file.name} - Probl√®mes d√©tect√©s")
                except Exception as e:
                    print(f"‚ùå {file.name} - Erreur de v√©rification: {e}")

    except Exception as e:
        print(f"‚ùå Erreur lors de la v√©rification finale: {e}")


def main():
    """Fonction principale."""
    print("üöÄ Script avanc√© de correction des fichiers Markdown")
    print("=" * 60)

    # Trouver tous les fichiers Markdown du projet
    markdown_files = _find_markdown_files()
    print(f"\nüìÅ {len(markdown_files)} fichiers Markdown trouv√©s")

    if not markdown_files:
        print("‚ùå Aucun fichier Markdown trouv√©")
        return

    # √âtape 1: Correction automatique des listes ordonn√©es
    print("\n" + "=" * 60)
    print("√âTAPE 1: Correction automatique des listes ordonn√©es")
    print("=" * 60)

    for file in markdown_files:
        _fix_ordered_lists(file)

    # √âtape 2: Formatage avec mdformat
    _format_files_with_mdformat(markdown_files)

    # √âtape 3: V√©rification finale avec markdownlint
    _final_verification(markdown_files)

    print("\n" + "=" * 60)
    print("‚úÖ Script termin√© !")
    print("=" * 60)


if __name__ == "__main__":
    main()
